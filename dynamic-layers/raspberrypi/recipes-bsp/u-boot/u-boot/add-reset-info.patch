diff --git a/arch/arm/mach-bcm283x/Makefile b/arch/arm/mach-bcm283x/Makefile
index 7cd068832f..e92bfe9616 100644
--- a/arch/arm/mach-bcm283x/Makefile
+++ b/arch/arm/mach-bcm283x/Makefile
@@ -4,3 +4,4 @@

 obj-$(CONFIG_BCM2835) += lowlevel_init.o
 obj-y	+= init.o reset.o mbox.o msg.o phys2bus.o
+obj-$(CONFIG_DISPLAY_CPUINFO) += sys_info.o
diff --git a/arch/arm/mach-bcm283x/init.c b/arch/arm/mach-bcm283x/init.c
index 7265faf6ce..76a5d18d98 100644
--- a/arch/arm/mach-bcm283x/init.c
+++ b/arch/arm/mach-bcm283x/init.c
@@ -150,6 +150,8 @@ int mach_cpu_init(void)
 int print_cpuinfo(void)
 {
 	printf("CPU: BCM283x\n");
+	printf("SoC: %s\n", CONFIG_SYS_SOC);
+	printf("Reset cause: %s\n", get_reset_cause());
 	return 0;
 }
 #endif
diff --git a/arch/arm/mach-bcm283x/sys_info.c b/arch/arm/mach-bcm283x/sys_info.c
new file mode 100644
index 0000000000..140f5ca438
--- /dev/null
+++ b/arch/arm/mach-bcm283x/sys_info.c
@@ -0,0 +1,25 @@
+#include <common.h>
+#include <asm/arch/wdog.h>
+#include <asm/io.h>
+
+#if defined(CONFIG_ARCH_BCM283X)
+
+/* see https://paulwratt.github.io/rpi-internal-registers-online/Region_PM.html#pm_rsts */
+#define BCM_2835_PM_RSTS_HADPOR (12)
+
+char *get_reset_cause(void)
+{
+	struct bcm2835_wdog_regs *regs = (struct bcm2835_wdog_regs *)BCM2835_WDOG_PHYSADDR;
+	uint32_t rsts = 0;
+
+	rsts = readl(&regs->rsts);
+	if ( rsts & (1 << BCM_2835_PM_RSTS_HADPOR) ) {
+		return "POR";
+	}
+
+	/* other reason like watchdog and warm start cannot be distinguished */
+	return "OTHER";
+}
+#else
+#error "SOC currently not supported"
+#endif
diff --git a/cmd/Kconfig b/cmd/Kconfig
index df6d71c103..e806098dc5 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -203,6 +203,13 @@ config CMD_REGINFO
 	help
 	  Register dump

+config CMD_RSTINFO
+	bool "rstinfo"
+	depends on ARCH_BCM283X
+	default n
+	help
+	  Detect the restart cause. Set the (non-persistent) environment variable rstinfo accordingly.
+
 config CMD_TLV_EEPROM
 	bool "tlv_eeprom"
 	depends on I2C_EEPROM
diff --git a/cmd/Makefile b/cmd/Makefile
index 9a6790cc17..e73a549529 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -153,6 +153,7 @@ obj-$(CONFIG_CMD_RNG) += rng.o
 obj-$(CONFIG_CMD_KASLRSEED) += kaslrseed.o
 obj-$(CONFIG_CMD_RKMTD) += rkmtd.o
 obj-$(CONFIG_CMD_ROCKUSB) += rockusb.o
+obj-$(CONFIG_CMD_RSTINFO) += rstinfo.o
 obj-$(CONFIG_CMD_RTC) += rtc.o
 obj-$(CONFIG_SANDBOX) += host.o
 obj-$(CONFIG_CMD_SATA) += sata.o
diff --git a/cmd/rstinfo.c b/cmd/rstinfo.c
new file mode 100644
index 0000000000..677fab384f
--- /dev/null
+++ b/cmd/rstinfo.c
@@ -0,0 +1,26 @@
+/*
+ *  Get Reset Cause
+ */
+
+#include <common.h>
+#include <command.h>
+
+extern int print_cpuinfo(void);
+static int do_rstinfo(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	(void)cmdtp;
+	(void)flag;
+	(void)argc;
+	(void)argv;
+	const char *reset_cause;
+
+	reset_cause = get_reset_cause();
+	printf("Reset cause: %s; set rstinfo environment variable\n", reset_cause);
+	env_set("rstinfo", reset_cause);
+	return 0;
+}
+
+U_BOOT_CMD(rstinfo, 1, 1, do_rstinfo,
+		"get restart cause",
+		"  - get the restart cause; set the environment variable rstinfo accordingly\n"
+);
