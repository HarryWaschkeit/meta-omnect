diff --git a/src/utils/eis_utils/src/eis_utils.c b/src/utils/eis_utils/src/eis_utils.c
index f15f593..0d0e9f4 100644
--- a/src/utils/eis_utils/src/eis_utils.c
+++ b/src/utils/eis_utils/src/eis_utils.c
@@ -59,6 +59,12 @@
  */
 #define EIS_IDENTITY_RESP_MODULEID_FIELD "moduleId"
 
+/**
+ * @brief Fieldname for the gatewayHostName provisioned to the IdentityService
+ */
+#define EIS_IDENTITY_RESP_GATEWAYHHOSTNAME_FIELD "gatewayHost"
+
+
 /**
  * @brief Fieldname for the JSON Object which contains the authType and keyHandle
  */
@@ -304,6 +310,7 @@ done:
  * @param deviceId the device identity for the connection string
  * @param moduleId an optional parameter specifying the module identity to use in the connection string
  * @param connType the connection type being used, if EISConnType_ModuleId then moduleId must not be NULL
+ * @param gatewayHostName an option parameter specifying the gatewayHostName in a nested environment
  * @param connectionStrPtr the pointer to the buffer which will be allocated for the connection string
  * @returns a value of EISErr
  */
@@ -312,6 +319,7 @@ EISErr BuildSasCertConnectionString(
     const char* deviceId,
     const char* moduleId,
     const ADUC_ConnType connType,
+    const char* gatewayHostName,
     char** connectionStrPtr)
 {
     bool success = false;
@@ -346,6 +354,12 @@ EISErr BuildSasCertConnectionString(
         goto done;
     }
 
+    if (NULL != gatewayHostName)
+    {
+        connectionStr =
+            ADUC_StringFormat("%s;GatewayHostName=%s", connectionStr, gatewayHostName);
+    }
+
     result = EISErr_Ok;
     success = true;
 
@@ -474,6 +488,8 @@ EISUtilityResult RequestConnectionStringFromEISWithExpiry(
         connType = ADUC_ConnType_Module;
     }
 
+    const char* gatewayHostName = json_object_get_string(specJson, EIS_IDENTITY_RESP_GATEWAYHHOSTNAME_FIELD);
+
     // Build request for the signature
     if (connType == ADUC_ConnType_Device)
     {
@@ -594,7 +610,7 @@ EISUtilityResult RequestConnectionStringFromEISWithExpiry(
             goto done;
         }
 
-        result.err = BuildSasCertConnectionString(hubName, deviceId, moduleId, connType, &connectionStr);
+        result.err = BuildSasCertConnectionString(hubName, deviceId, moduleId, connType, gatewayHostName, &connectionStr);
 
         if (result.err != EISErr_Ok)
         {
