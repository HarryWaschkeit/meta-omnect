diff --git a/src/content_handlers/CMakeLists.txt b/src/content_handlers/CMakeLists.txt
index 60a09f5..773ede6 100644
--- a/src/content_handlers/CMakeLists.txt
+++ b/src/content_handlers/CMakeLists.txt
@@ -30,6 +30,7 @@ add_subdirectory (script_handler)
 add_subdirectory (simulator_handler)
 add_subdirectory (steps_handler)
 add_subdirectory (swupdate_handler)
+add_subdirectory (swupdate_consent_handler)

 #
 # Note: add more update content handler extensions here.
diff --git a/src/content_handlers/swupdate_consent_handler/CMakeLists.txt b/src/content_handlers/swupdate_consent_handler/CMakeLists.txt
new file mode 100644
index 0000000..4d2d7a6
--- /dev/null
+++ b/src/content_handlers/swupdate_consent_handler/CMakeLists.txt
@@ -0,0 +1,48 @@
+cmake_minimum_required (VERSION 3.5)
+
+set (target_name conplement_swupdate_consent_1)
+
+set (SOURCE_ALL src/swupdate_consent_handler.cpp)
+
+#
+# Create a shared library.
+#
+add_library (${target_name} SHARED ${SOURCE_ALL})
+
+add_library (aduc::${target_name} ALIAS ${target_name})
+
+find_package (Parson REQUIRED)
+
+target_include_directories (
+    ${target_name}
+    PUBLIC inc
+    PRIVATE ${PROJECT_SOURCE_DIR}/inc
+            ${ADUC_TYPES_INCLUDES}
+            ${ADUC_EXPORT_INCLUDES}
+            ${ADU_SHELL_INCLUDES}
+            ${ADU_EXTENSION_INCLUDES})
+
+get_filename_component (
+    ADUC_INSTALLEDCRITERIA_FILE_PATH
+    "${ADUC_DATA_FOLDER}/${ADUC_INSTALLEDCRITERIA_FILE}"
+    ABSOLUTE
+    "/")
+
+find_package (azure_c_shared_utility REQUIRED)
+
+target_compile_definitions (
+    ${target_name} PRIVATE ADUC_INSTALLEDCRITERIA_FILE_PATH="${ADUC_INSTALLEDCRITERIA_FILE_PATH}"
+                                                    ADUC_VERSION_FILE="${ADUC_VERSION_FILE}")
+
+target_link_libraries (
+    ${target_name}
+    PUBLIC aduc::content_handlers
+    PRIVATE aduc::logging
+            aduc::agent_workflow
+            aduc::workflow_utils
+            aduc::string_utils
+            Parson::parson
+            -zdefs
+            )
+
+install (TARGETS ${target_name} LIBRARY DESTINATION ${ADUC_EXTENSIONS_INSTALL_FOLDER})
diff --git a/src/content_handlers/swupdate_consent_handler/inc/aduc/swupdate_consent_handler.hpp b/src/content_handlers/swupdate_consent_handler/inc/aduc/swupdate_consent_handler.hpp
new file mode 100644
index 0000000..367eef3
--- /dev/null
+++ b/src/content_handlers/swupdate_consent_handler/inc/aduc/swupdate_consent_handler.hpp
@@ -0,0 +1,56 @@
+/**
+ * @file swupdate_consent_handler.hpp
+ * @brief Defines SWUpdateConsentHandlerImpl.
+ *
+ * @copyright Copyright (c) Microsoft Corporation.
+ * Licensed under the MIT License.
+ */
+#ifndef ADUC_SWUPDATECONSENT_HANDLER_HPP
+#define ADUC_SWUPDATECONSENT_HANDLER_HPP
+
+#include "aduc/content_handler.hpp"
+#include "aduc/logging.h"
+#include <string>
+
+EXTERN_C_BEGIN
+
+/**
+ * @brief Instantiates an Update Content Handler swupdateconsent.
+ * @return A pointer to an instantiated Update Content Handler object.
+ */
+ContentHandler* CreateUpdateContentHandlerExtension(ADUC_LOG_SEVERITY logLevel);
+
+EXTERN_C_END
+
+/**
+ * @class SWUpdateConsentHandlerImpl
+ * @brief The swupdateconsent handler implementation.
+ */
+class SWUpdateConsentHandlerImpl : public ContentHandler
+{
+public:
+    static ContentHandler* CreateContentHandler();
+
+    // Delete copy ctor, copy assignment, move ctor and move assignment operators.
+    SWUpdateConsentHandlerImpl(const SWUpdateConsentHandlerImpl&) = delete;
+    SWUpdateConsentHandlerImpl& operator=(const SWUpdateConsentHandlerImpl&) = delete;
+    SWUpdateConsentHandlerImpl(SWUpdateConsentHandlerImpl&&) = delete;
+    SWUpdateConsentHandlerImpl& operator=(SWUpdateConsentHandlerImpl&&) = delete;
+
+    ~SWUpdateConsentHandlerImpl() override;
+
+    ADUC_Result Download(const tagADUC_WorkflowData* workflowData) override;
+    ADUC_Result Install(const tagADUC_WorkflowData* workflowData) override;
+    ADUC_Result Apply(const tagADUC_WorkflowData* workflowData) override;
+    ADUC_Result Cancel(const tagADUC_WorkflowData* workflowData) override;
+    ADUC_Result IsInstalled(const tagADUC_WorkflowData* workflowData) override;
+    static std::string ReadValueFromFile(const std::string& filePath);
+
+private:
+    // Private constructor, must call CreateContentHandler factory method.
+    SWUpdateConsentHandlerImpl()
+    {
+    }
+};
+
+#endif // ADUC_SWUPDATECONSENT_HANDLER_HPP
diff --git a/src/content_handlers/swupdate_consent_handler/src/swupdate_consent_handler.cpp b/src/content_handlers/swupdate_consent_handler/src/swupdate_consent_handler.cpp
new file mode 100644
index 0000000..9e7dd82
--- /dev/null
+++ b/src/content_handlers/swupdate_consent_handler/src/swupdate_consent_handler.cpp
@@ -0,0 +1,224 @@
+/**
+ * @file swupdate_consent_handler.cpp
+ * @brief Implementation of ContentHandler API for update content swupdate_consent.
+ *
+ * @copyright Copyright (c) Microsoft Corporation.
+ * Licensed under the MIT License.
+ */
+#include "aduc/swupdate_consent_handler.hpp"
+#include "aduc/logging.h"
+#include "aduc/workflow_utils.h"
+#include "parson.h"
+#include <stdarg.h> // for va_*
+#include <stdlib.h> // for getenv
+#include <memory>
+#include <string>
+#include <fstream>
+#include "aduc/string_c_utils.h"
+#include "aduc/string_utils.hpp"
+
+#include<stdio.h>
+#include<unistd.h>
+#include<errno.h>
+#include<sys/types.h>
+#include<sys/stat.h>
+#include<fcntl.h>
+
+#define ADUC_SWUPDATE_CONSENT_CONF_FILE "/etc/ics_dm/user_consent_conf"
+#define ADUC_SWUPDATE_CONSENT_ONCE_TRIGGER_FILE "/tmp/user_consent_once"
+#define ADUC_SWUPDATE_CONSENT_INSTALLED_CRITERIA_FILE "/etc/ics_dm/user_consent_installed_criteria"
+
+EXTERN_C_BEGIN
+
+/**
+ * @brief Instantiates an SWUpdateConsent Update Content Handler
+ */
+ContentHandler* CreateUpdateContentHandlerExtension(ADUC_LOG_SEVERITY logLevel)
+{
+    ADUC_Logging_Init(logLevel, "swupdate_consent-handler");
+    Log_Info("Instantiating a SWUpdateConsent Update Content Handler");
+    try
+    {
+        return SWUpdateConsentHandlerImpl::CreateContentHandler();
+    }
+    catch (const std::exception& e)
+    {
+        const char* what = e.what();
+        Log_Error("Unhandled std exception: %s", what);
+    }
+    catch (...)
+    {
+        Log_Error("Unhandled exception");
+    }
+
+    return nullptr;
+}
+
+EXTERN_C_END
+
+/**
+ * @brief Destructor for the SWUpdateConsent Handler Impl class.
+ */
+SWUpdateConsentHandlerImpl::~SWUpdateConsentHandlerImpl() // override
+{
+    ADUC_Logging_Uninit();
+}
+
+// Forward declarations.
+static ADUC_Result CancelApply(const char* logFolder);
+
+/**
+ * @brief Creates a new SWUpdateConsentHandlerImpl object and casts to a ContentHandler.
+ * Note that there is no way to create a SWUpdateConsentHandlerImpl directly.
+ *
+ * @return ContentHandler* SWUpdateConsentHandlerImpl object as a ContentHandler.
+ */
+ContentHandler* SWUpdateConsentHandlerImpl::CreateContentHandler()
+{
+    return new SWUpdateConsentHandlerImpl();
+}
+
+/**
+ * @brief Implementation of download action.
+ * @return ADUC_Result return ADUC_Result_Download_Success.
+ */
+ADUC_Result SWUpdateConsentHandlerImpl::Download(const tagADUC_WorkflowData* workflowData)
+{
+    std::fstream f;
+    char* installedCriteria = workflow_get_installed_criteria(workflowData->WorkflowHandle);
+
+    Log_Info("swupdate waiting for user consent");
+    while( access( ADUC_SWUPDATE_CONSENT_ONCE_TRIGGER_FILE, F_OK ) != 0 );
+    Log_Info("swupdate User consent succeeded");
+
+    // open and clear file
+    f.open(ADUC_SWUPDATE_CONSENT_INSTALLED_CRITERIA_FILE, std::fstream::out | std::fstream::trunc);
+    // write data
+    f << installedCriteria << std::endl;
+    f.close();
+
+    workflow_free_string(installedCriteria);
+    return ADUC_Result{ ADUC_Result_Download_Success };
+}
+
+/**
+ * @brief Implementation of install
+ * @return ADUC_Result return ADUC_Result_Install_Success.
+ */
+ADUC_Result SWUpdateConsentHandlerImpl::Install(const tagADUC_WorkflowData* workflowData)
+{
+    Log_Info("swupdate consent Install succeeded");
+    UNREFERENCED_PARAMETER(workflowData);
+    return ADUC_Result{ ADUC_Result_Install_Success };
+}
+
+/**
+ * @brief Implementation of apply.
+ * @return ADUC_Result return ADUC_Result_Apply_Success.
+ */
+ADUC_Result SWUpdateConsentHandlerImpl::Apply(const tagADUC_WorkflowData* workflowData)
+{
+    Log_Info("swupdate consent Apply succeeded");
+    UNREFERENCED_PARAMETER(workflowData);
+    return ADUC_Result{ ADUC_Result_Apply_Success };
+}
+
+/**
+ * @brief Implementation of cancel
+ * @return ADUC_Result return ADUC_Result_Cancel_Success.
+ */
+ADUC_Result SWUpdateConsentHandlerImpl::Cancel(const tagADUC_WorkflowData* workflowData)
+{
+    Log_Info("swupdate consent Cancel succeeded");
+    UNREFERENCED_PARAMETER(workflowData);
+    return ADUC_Result{ ADUC_Result_Cancel_Success };
+}
+
+/**
+ * @brief Reads a first line of a file, trims trailing whitespace, and returns as string.
+ *
+ * @param filePath Path to the file to read value from.
+ * @return std::string Returns the value from the file. Returns empty string if there was an error.
+ */
+/*static*/
+std::string SWUpdateConsentHandlerImpl::ReadValueFromFile(const std::string& filePath)
+{
+    if (filePath.empty())
+    {
+        Log_Error("Empty file path.");
+        return std::string{};
+    }
+
+    if ((filePath.length()) + 1 > PATH_MAX)
+    {
+        Log_Error("Path is too long.");
+        return std::string{};
+    }
+
+    std::ifstream file(filePath);
+    if (!file.is_open())
+    {
+        Log_Error("File %s failed to open, error: %d", filePath.c_str(), errno);
+        return std::string{};
+    }
+
+    std::string result;
+    std::getline(file, result);
+    if (file.bad())
+    {
+        Log_Error("Unable to read from file %s, error: %d", filePath.c_str(), errno);
+        return std::string{};
+    }
+
+    // Trim whitespace
+    ADUC::StringUtils::Trim(result);
+    return result;
+}
+
+/**
+ * @brief Implementation of IsInstalled check.
+ * @return ADUC_Result The result based on evaluating the installed criteria.
+ */
+ADUC_Result SWUpdateConsentHandlerImpl::IsInstalled(const tagADUC_WorkflowData* workflowData)
+{
+    std::fstream f;
+    std::string user_consent_agreed = "swupdate agreed";
+    char* installedCriteria = workflow_get_installed_criteria(workflowData->WorkflowHandle);
+
+    ADUC_Result result;
+
+    std::string user_consent{ ReadValueFromFile(ADUC_SWUPDATE_CONSENT_CONF_FILE) };
+    std::string user_consent_criteria{ ReadValueFromFile(ADUC_SWUPDATE_CONSENT_INSTALLED_CRITERIA_FILE) };
+
+    if (user_consent == user_consent_agreed)
+    {
+        Log_Info("consent for swupdate is available in configuration file!");
+
+        if (user_consent_criteria != installedCriteria)
+        {
+            // open and clear file
+            f.open(ADUC_SWUPDATE_CONSENT_INSTALLED_CRITERIA_FILE, std::fstream::out | std::fstream::trunc);
+            // write data
+            f << installedCriteria << std::endl;
+            f.close();
+        }
+        result = { ADUC_Result_IsInstalled_Installed };
+        goto done;
+    }
+    else
+    {
+        if (user_consent_criteria == installedCriteria)
+        {
+            Log_Info("swupdate consent for Installed criteria %s was installed!", installedCriteria);
+            result = { ADUC_Result_IsInstalled_Installed };
+            goto done;
+        }
+    }
+
+    Log_Info("swupdate consent Installed criteria %s was not installed, the current criteria is %s", installedCriteria, user_consent_criteria.c_str());
+    result = { ADUC_Result_IsInstalled_NotInstalled };
+
+done:
+    workflow_free_string(installedCriteria);
+    return result;
+}
