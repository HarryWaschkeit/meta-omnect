#!/bin/sh

#
# handle triggered factory reset
#
#  NOTE: The current implementation does not provide a secure factory reset, because the data are _NOT_ wiped.
#  TODO: Implement higher levels of privacy options (e.g.; ICS_DM_TRIGGER_FACTORY_RESET_VAR == 2).
#

# name of u-boot environment variable used to trigger factory reset
ICS_DM_TRIGGER_FACTORY_RESET_VAR="factory-reset"

# called by generic INITRAMFS
factory_reset_enabled() {
    local factory_reset=""

    factory_reset=$(get_bootloader_env_var ${ICS_DM_TRIGGER_FACTORY_RESET_VAR})
    if [ "${factory_reset}" == "1" ]; then
        msg "Triggered Factory Reset!"
        return 0  # enable main entry point
    fi

    return 1  # no factory reset triggered; normal boot; main entry point _NOT_ called
}

# main entry point
factory_reset_run() {
    local data_part=""
    local  etc_part=""

    data_part=$(get_block_device data)
     etc_part=$(get_block_device  etc)

    msg "Running Factory Reset..."

    # enforce mkfs
    check_ext4_fs "data" "${data_part}" 1
    check_ext4_fs "etc"  "${etc_part}"  1

    # remove factory reset trigger at this point; interrupted factory reset will be replayed
    set_bootloader_env_var ${ICS_DM_TRIGGER_FACTORY_RESET_VAR}

    # get into normal startup
    msg "Rebooting system..."
    reboot -f
    # -- never reached --
}
